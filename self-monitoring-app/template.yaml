AWSTemplateFormatVersion: "2010-09-09"

Description: >
  Self Monitoring App for Remote Instrumentation

# All version values except L12 are double-quoted on purpose since publish.sh is searching for
# version string and replace the value with new version. All other version values should be
# double-quoted.
Mappings:
  Constants:
    SelfMonitorRemoteInstrumentApp:
      Version: 0.1.0

Parameters:
  DdRemoteInstrumentLayer:
    Type: String
    Default: arn:aws:lambda:us-west-1:425362996713:layer:Datadog-Serverless-Remote-Instrumentation-ARM:27
  DdApiKey:
    Type: String
    Description: >-
      The Datadog API key, which can be found from the APIs page
      (/organization-settings/api-keys).
    NoEcho: true
  DdSite:
    Type: String
    Default: datadoghq.com
    Description: >-
      Define your Datadog Site to send data to. Possible values are
      `datadoghq.com`, `datadoghq.eu`, `us3.datadoghq.com`, `us5.datadoghq.com`
      and `ddog-gov.com`.
    AllowedPattern: .+
    ConstraintDescription: DdSite is required
  ModifierLambdaFunctionName:
    Type: String
    Default: remote-instrument-self-monitoring-modifier
    Description: >-
      Define the Lambda function name which is remote instrumenting the other Lambda functions.
  BucketName:
    Type: String
    Default: remote-instrument-self-monitor
  DdAllowList:
    Type: String
    Default: remote-instrument-self-monitor-node,remote-instrument-self-monitor-python,some-function-does-not-exist-for-testing-purpose
  DdTagRule:
    Type: String
    Default: DD_REMOTE_INSTRUMENT_ENABLED:true,another-tag:true
  DdDenyList:
    Type: String
    Default: ""
  NodeLambdaFunctionName:
    Type: String
    Default: remote-instrument-self-monitor-node
  PythonLambdaFunctionName:
    Type: String
    Default: remote-instrument-self-monitor-python
  LambdaWithSpecifiedTagsFunctionName:
    Type: String
    Default: remote-instrument-self-monitor-with-specified-tags
  LambdaWithoutSpecifiedTagsFunctionName:
    Type: String
    Default: remote-instrument-self-monitor-without-specified-tags
  LambdaWithTagsUpdatedToBeInDenyListFunctionName:
    Type: String
    Default: remote-instrument-self-monitor-with-tags-updated-in-deny-list
  LambdaWith128MbRamFunctionName:
    Type: String
    Default: remote-instrument-self-monitor-128mb
  DdExtensionLayerVersion:
    Type: String
    Default: '50'
  UpdatedDdExtensionLayerVersion:
    Type: String
    Default: '49'
  DdPythonLayerVersion:
    Type: String
    Default: '70'
  DdNodeLayerVersion:
    Type: String
    Default: '100'
  DdAwsAccountNumber:
    Type: String
    Default: '425362996713'
  EnableCodeSigningConfigurations:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  DdRemoteInstrumentLayerAwsAccount:
    Type: String
    Default: '425362996713'


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Frequently Used
        Parameters:
          - DdRemoteInstrumentLayer
          - DdApiKey
      - Label:
          default: Others

Resources:
  RemoteInstrumentNestedStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - NodeLambdaFunction
      - PythonLambdaFunction
      - LambdaFunctionWithSpecifiedTags
      - LambdaFunctionWithoutSpecifiedTags
      - LambdaWith128MbRam
    Properties:
      TemplateURL: https://datadog-cloudformation-template-serverless-sandbox.s3.amazonaws.com/aws/remote-instrument-dev/0.8.4.yaml
      Parameters:
        DdRemoteInstrumentLayer: !Ref DdRemoteInstrumentLayer
        DdApiKey: !Ref DdApiKey
        DdSite: !Ref DdSite
        BucketName: !Ref BucketName
        DdAllowList: !Ref DdAllowList
        DdDenyList: !Ref DdDenyList
        DdTagRule: !Ref DdTagRule
        DdExtensionLayerVersion: !Ref DdExtensionLayerVersion
        DdPythonLayerVersion: !Ref DdPythonLayerVersion
        DdNodeLayerVersion: !Ref DdNodeLayerVersion
        DdAwsAccountNumber: '425362996713'
        EnableCodeSigningConfigurations: !Ref EnableCodeSigningConfigurations
        DdRemoteInstrumentLayerAwsAccount: !Ref DdRemoteInstrumentLayerAwsAccount
  ModifierLambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - RemoteInstrumentNestedStack
      - NodeLambdaFunction
      - PythonLambdaFunction
      - LambdaFunctionWithSpecifiedTags
      - LambdaFunctionWithoutSpecifiedTags
    Properties:
      FunctionName: !Ref ModifierLambdaFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      ReservedConcurrentExecutions: 1
      Timeout: 900
      MemorySize: 512
      Role: !GetAtt ModifierLambdaExecutionRole.Arn
      Handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension-ARM:55'
        - !Sub 'arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Node20-x:106'
        - !Sub 'arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Serverless-Remote-Instrumentation-ARM:1'
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_LOG_LEVEL: DEBUG
          DD_TRACE_DEBUG: false
          DD_SERVICE: remote-instrument-modifier
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
          NodeLambdaFunctionName: !Ref NodeLambdaFunctionName
          PythonLambdaFunctionName: !Ref PythonLambdaFunctionName
          LambdaWithSpecifiedTagsFunctionName: !Ref LambdaWithSpecifiedTagsFunctionName
          LambdaWithoutSpecifiedTagsFunctionName: !Ref LambdaWithoutSpecifiedTagsFunctionName
          LambdaWithTagsUpdatedToBeInDenyListFunctionName: !Ref LambdaWithTagsUpdatedToBeInDenyListFunctionName
          DdExtensionLayerVersion: !Ref DdExtensionLayerVersion
          UpdatedDdExtensionLayerVersion: !Ref UpdatedDdExtensionLayerVersion
          DdRemoteInstrumentLayer: !Ref DdRemoteInstrumentLayer
          DdRemoteInstrumentLayerAwsAccount: !Ref DdRemoteInstrumentLayerAwsAccount

      Code:
        ZipFile: |
          INJECT_ENTRY_FUNCTION_CODE_PLACEHOLDER
  ModifierLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
#              - lambda:InvokeFunction
#              - lambda:GetFunction
#              - lambda:UpdateFunctionConfiguration
#              - lambda:TagResource
#              - lambda:UntagResource
#              - lambda:CreateFunction
#              - lambda:AddPermission
              # TODO: new hire task to remove this iam:* and limit the permissions
              - lambda:*
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              lambda:CreateCodeSigningConfig
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:code-signing-config:*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: !Sub arn:aws:lambda:${AWS::Region}:*:layer:*
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
              - cloudformation:DescribeStackResources
            Resource: !Sub arn:aws:cloudformation:${AWS::Region}:425362996713:stack/*
          - Effect: Allow
            Action:
              - s3:*
            Resource: '*'
          - Effect: Allow
            Action:
#              - iam:CreateRole
#              - iam:PutRolePolicy
#              - iam:GetRole
#              - iam:TagRole
#              - iam:PassRole
#              - iam:DeleteRolePolicy
#              - iam:DeleteRole
              # TODO: new hire task to remove this iam:* and limit the permissions
              - iam:*
            Resource:
            - arn:aws:iam::425362996713:role/*
            - arn:aws:iam::425362996713:policy/*
          - Effect: Allow
            Action:
              -  cloudtrail:*
            Resource: !Sub arn:aws:cloudtrail:${AWS::Region}:425362996713:trail/*
          - Effect: Allow
            Action:
              -  events:*
            Resource: !Sub arn:aws:events:${AWS::Region}:425362996713:rule/*
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub arn:aws:s3:::${BucketName}

  NodeLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref NodeLambdaFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      Timeout: 90
      MemorySize: 512
      Role: !GetAtt NodeLambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_SERVICE: remote-instrument-self-monitor
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
      Tags:
        - Key: "service"
          Value: "remote-instrument-self-monitor"
        - Key: "DD_REMOTE_INSTRUMENT_ENABLED"
          Value: "true"
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
            console.log('\n event:', JSON.stringify(event))
            return `Succeeded.`;
          };

  NodeLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*

  PythonLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: "remote-instrument-self-monitor-python"
      Architectures:
      - arm64
      Runtime: python3.11
      Timeout: 90
      MemorySize: 512
      Role: !GetAtt PythonLambdaRole.Arn
      Handler: index.lambda_handler
      Environment:
        Variables:
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_SERVICE: remote-instrument-self-monitor
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
      Tags:
        - Key: "service"
          Value: "remote-instrument-self-monitor"
        - Key: "DD_REMOTE_INSTRUMENT_ENABLED"
          Value: "true"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            return {
                "statusCode": 200
            }

  PythonLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*

  LambdaFunctionWithSpecifiedTags:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaWithSpecifiedTagsFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      Timeout: 90
      MemorySize: 512
      Role: !GetAtt NodeLambdaExecutionRole.Arn
      Handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_SERVICE: remote-instrument-self-monitor
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
      Tags:
        - Key: "service"
          Value: "remote-instrument-self-monitor"
        - Key: "DD_REMOTE_INSTRUMENT_ENABLED"
          Value: "true"
        - Key: "another-tag"
          Value: "true"
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
            console.log('\n event:', JSON.stringify(event))
            return `Succeeded.`;
          };

  FunctionWithSpecifiedTagsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*

  LambdaFunctionWithoutSpecifiedTags:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaWithoutSpecifiedTagsFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      Timeout: 90
      MemorySize: 512
      Role: !GetAtt NodeLambdaExecutionRole.Arn
      Handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_SERVICE: remote-instrument-self-monitor
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
      Tags:
        - Key: "service"
          Value: "remote-instrument-self-monitor"
        - Key: "another-tag"
          Value: "true"
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
            console.log('\n event:', JSON.stringify(event))
            return `Succeeded.`;
          };

  FunctionWithoutSpecifiedTagsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*

  LambdaWithTagsUpdatedToBeInDenyList:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaWithTagsUpdatedToBeInDenyListFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      Timeout: 90
      MemorySize: 512
      Role: !GetAtt NodeLambdaExecutionRole.Arn
      Handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: index.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_SERVICE: remote-instrument-self-monitor
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
      Tags:
        - Key: "service"
          Value: "remote-instrument-self-monitor"
        - Key: "DD_REMOTE_INSTRUMENT_ENABLED"
          Value: "true"
        - Key: "another-tag"
          Value: "true"
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
            console.log('\n event:', JSON.stringify(event))
            return `Succeeded.`;
          };

  LambdaWithTagsUpdatedToBeInDenyListLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*

  LambdaWith128MbRam:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaWith128MbRamFunctionName
      Architectures:
        - arm64
      Runtime: nodejs20.x
      Timeout: 90
      MemorySize: 128
      Role: !GetAtt NodeLambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_SERVICE: remote-instrument-self-monitor
          DD_ENV: dev
          DD_VERSION: 0.1.0
          DD_SITE: !Ref DdSite
      Tags:
        - Key: "service"
          Value: "remote-instrument-self-monitor"
        - Key: "DD_REMOTE_INSTRUMENT_ENABLED"
          Value: "true"
        - Key: "another-tag"
          Value: "true"
      Code:
        ZipFile: |
          exports.handler = async (event, context, callback) => {
            console.log('\n event:', JSON.stringify(event))
            return `Succeeded.`;
          };

  LambdaWith128MbRamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - lambda:GetLayerVersion
                Resource: !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*


  UninstrumentScheduledRule:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - ModifierLambdaFunction
    Properties:
      Description: "Triggered every hour at minute 5"
      ScheduleExpression: "cron(58,28 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ModifierLambdaFunctionName}
          Id: "UninstrumentRemoteInstrumentSelfMonitor"
          Input: '{"eventName": "Uninstrument"}'
  UninstrumentScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ModifierLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UninstrumentScheduledRule.Arn
  UpdateStackScheduledRule:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - ModifierLambdaFunction
    Properties:
      Description: "Triggered every hour at minute 5"
      ScheduleExpression: "cron(5,35 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ModifierLambdaFunctionName}
          Id: "UpdateStackRemoteInstrumentSelfMonitor"
          Input: '{"eventName": "UpdateStack"}'
  UpdateStackScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ModifierLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UpdateStackScheduledRule.Arn
  DeleteStackScheduledRule:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - ModifierLambdaFunction
    Properties:
      Description: "Triggered every hour at minute 5"
      ScheduleExpression: "cron(10,40 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ModifierLambdaFunctionName}
          Id: "DeleteStackRemoteInstrumentSelfMonitor"
          Input: '{"eventName": "DeleteStack"}'
  DeleteStackScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ModifierLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DeleteStackScheduledRule.Arn
  UninstrumentAfterDeleteStackScheduledRule:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - ModifierLambdaFunction
    Properties:
      Description: "Triggered every hour at minute 5"
      ScheduleExpression: "cron(15,45 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ModifierLambdaFunctionName}
          Id: "UninstrumentRemoteInstrumentSelfMonitor"
          Input: '{"eventName": "UninstrumentAfterDeleteStack"}'
  UninstrumentAfterDeleteStackScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ModifierLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UninstrumentAfterDeleteStackScheduledRule.Arn
  CreateStackScheduledRule:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - ModifierLambdaFunction
    Properties:
      Description: "Triggered every hour at minute 5"
      ScheduleExpression: "cron(20,50 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ModifierLambdaFunctionName}
          Id: "CreateStackRemoteInstrumentSelfMonitor"
          Input: '{"eventName": "CreateStack"}'
  CreateStackScheduledRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ModifierLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CreateStackScheduledRule.Arn
  EveryNMinutesScheduledRule:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - ModifierLambdaFunction
    Properties:
      Description: "Triggered every N minutes"
      ScheduleExpression: "cron(0/2 * * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${NodeLambdaFunctionName}
          Id: "NodeFunction"
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PythonLambdaFunctionName}
          Id: "PythonFunction"
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaWithSpecifiedTagsFunctionName}
          Id: "FunctionWithTags"
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaWithoutSpecifiedTagsFunctionName}
          Id: "FunctionWithoutTags"
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaWithTagsUpdatedToBeInDenyListFunctionName}
          Id: "FunctionWithTagsUpdatedToBeInDenyList"
  EveryNMinutesScheduledRuleForNodePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NodeLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EveryNMinutesScheduledRule.Arn
  EveryNMinutesScheduledRuleForPythonPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PythonLambdaFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EveryNMinutesScheduledRule.Arn
  EveryNMinutesScheduledRuleForWithTagsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaWithSpecifiedTagsFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EveryNMinutesScheduledRule.Arn
  EveryNMinutesScheduledRuleForWithoutTagsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaWithoutSpecifiedTagsFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EveryNMinutesScheduledRule.Arn
  EveryNMinutesScheduledRuleForWithTagsUpdateToBeInDenyListPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaWithTagsUpdatedToBeInDenyListFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EveryNMinutesScheduledRule.Arn
