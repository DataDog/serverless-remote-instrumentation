AWSTemplateFormatVersion: "2010-09-09"

Description: Datadog Lambda Remote Instrumentation App

Mappings:
  Constants:
    DdRemoteInstrumentApp:
      Version: 1.1.0
    DdRemoteInstrumentLayerAwsAccount:
      Number: 464622532012
    DdRemoteInstrumentLayerVersion:
      # eslint-disable-next-line
      Version: {CURRENT_LAYER_VERSION}
    DdCIBypassSiteValidation:
      Bypass: false

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Remote Instrumenter Configuration
        Parameters:
          - DdApiKey
          - EnableCodeSigningConfigurations
          - DdInstrumenterFunctionEnv
      - Label:
          default: Additional Configs
        Parameters:
          - DdSite
          - BucketPrefix
          - BucketName
          - InstrumenterFunctionName
          - TrailName

Conditions:
  CreateCodeSigningConfig: !Equals [ !Ref EnableCodeSigningConfigurations, "true" ]
  HasBucketName: !Not [!Equals [ !Ref BucketName, ""]]

Parameters:
  EnableCodeSigningConfigurations:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: Whether to enable code signing configurations.
  DdApiKey:
    Type: String
    Description: >-
      The Datadog API key, which can be found from the APIs page
      (/organization-settings/api-keys).
    AllowedPattern: ".+"
    NoEcho: true
  DdSite:
    Type: String
    Default: datadoghq.com
    Description: >-
      The Datadog site where data will be sent. Possible values are `datadoghq.com`, `datadoghq.eu`, `us3.datadoghq.com`, `us5.datadoghq.com`, `ap1.datadoghq.com`.
    AllowedPattern: .+
    ConstraintDescription: DdSite is required
  InstrumenterFunctionName:
    Type: String
    Default: datadog-remote-instrumenter
    Description: >-
      The name of the Lambda function that will instrument other Lambda functions.
  BucketName:
    Type: String
    Default: ""
    Description: >-
      The name of the remote instrumenter bucket. If not provided, the bucket name will be generated based on the BucketPrefix.
  BucketPrefix:
    Type: String
    Default: datadog-remote-instrument
    Description: >-
      A prefix to use for the name of the remote instrumenter bucket. The bucket name will be generated based on this prefix.
  TrailName:
    Type: String
    Default: datadog-serverless-instrumentation-trail
  DdInstrumenterFunctionEnv:
    Type: String
    Default: 'dev'
    Description: >-
      The DD_ENV value for the remote instrumenter Lambda function

Resources:
  CloudFormationLifeCycle:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      FunctionName: !Ref InstrumenterFunctionName
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref InstrumenterFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      CodeSigningConfigArn: !If [CreateCodeSigningConfig, !Ref InstrumenterCodeSigningConfig, !Ref "AWS::NoValue"]
      ReservedConcurrentExecutions: 1
      Timeout: 900
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: /opt/nodejs/node_modules/datadog-remote-instrument/handler.handler
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension-ARM:68'
        - !Join
          - ''
          - - 'arn:aws:lambda:'
            - !Ref "AWS::Region"
            - ':'
            - !FindInMap [ Constants, DdRemoteInstrumentLayerAwsAccount, Number ]
            - ':layer:Datadog-Serverless-Remote-Instrumentation-ARM:'
            - !FindInMap [ Constants, DdRemoteInstrumentLayerVersion, Version ]
      Environment:
        Variables:
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_LOG_LEVEL: WARN
          DD_TRACE_DEBUG: false
          DD_SERVICE: Datadog-Instrument
          DD_ENV: !Ref DdInstrumenterFunctionEnv
          DD_SITE: !Ref DdSite
          DATADOG_SITE: !Ref DdSite
          DD_CI_BYPASS_SITE_VALIDATION: !FindInMap [ Constants, DdCIBypassSiteValidation, Bypass ]
          DD_AWS_ACCOUNT_NUMBER: !Sub '${AWS::AccountId}'
          DD_S3_BUCKET: !Ref S3Bucket
          DD_REMOTE_CONFIGURATION_ENABLED: true
          DD_APM_ENABLED: true
          DD_EXTENSION_VERSION: compatibility
          DD_TAGS: !Join ["", ["template_version:", !FindInMap [ Constants, DdRemoteInstrumentApp, Version ]] ]
          DD_INSTRUMENTER_VERSION: !FindInMap [ Constants, DdRemoteInstrumentApp, Version ]
      Tags:
        - Key: "dd_serverless_service"
          Value: "remote_instrumenter"
      Code:
        ZipFile: |
          const cfnResponse = require("cfn-response");  // file will be auto-injected by CloudFormation
          exports.handler = async (event, context, callback) => {
            return `Succeeded.`;
          };

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:GetFunction
              - lambda:GetFunctionConfiguration
              - lambda:UpdateFunctionConfiguration
              - lambda:TagResource
              - lambda:UntagResource
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource:
            - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*
            - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Serverless-Remote-Instrumentation-ARM:*
            - !Join
              - ''
              - - 'arn:aws:lambda:'
                - !Ref "AWS::Region"
                - ':'
                - !FindInMap [ Constants, DdRemoteInstrumentLayerAwsAccount, Number ]
                - ':layer:*'
          - Effect: Allow
            Action:
              - lambda:ListTags
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Join ["", [!GetAtt S3Bucket.Arn, '*']]
          - Effect: Allow
            Action:
              - tag:GetResources
              - tag:TagResources
              - tag:UntagResources
              - lambda:ListFunctions
            Resource: '*'
            Condition:
              ArnEquals:
                lambda:SourceFunctionArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${InstrumenterFunctionName}

  InstrumenterCodeSigningConfig:
    Type: "AWS::Lambda::CodeSigningConfig"
    Condition: CreateCodeSigningConfig
    Properties:
      Description: "Lambda Code Signing Configuration"
      AllowedPublishers:
        SigningProfileVersionArns:
          - 'arn:aws:signer:us-east-1:464622532012:/signing-profiles/DatadogLambdaSigningProfile/9vMI9ZAGLc'
      CodeSigningPolicies:
        UntrustedArtifactOnDeployment: Enforce

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - S3Bucket
      - S3BucketPolicy
    Properties:
      S3BucketName: !Ref S3Bucket
      IsLogging: true
      TrailName: !Ref TrailName
      EnableLogFileValidation: false
      IncludeGlobalServiceEvents: false
      IsMultiRegionTrail: false
      Tags:
        - Key: "env"
          Value: "dev"
      AdvancedEventSelectors:
        - Name: "Lambda Management Events"
          FieldSelectors:
            - Field: "eventCategory"
              Equals: [ "Management" ]
            - Field: "eventSource"
              NotEquals:
                - kms.amazonaws.com
                - rdsdata.amazonaws.com
            - Field: "readOnly"
              Equals:
                - "false"
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !If 
        - HasBucketName
        - !Ref BucketName 
        - !Join
          - '-'
          - - !Ref BucketPrefix
            - 'bucket'
            - !Select
              - 0
              - !Split
                - '-'
                - !Select
                  - 2
                  - !Split
                    - /
                    - !Ref AWS::StackId

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - S3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt S3Bucket.Arn
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${TrailName}"
          - Sid: AWSCloudTrailWrite20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Join ['/', [!GetAtt S3Bucket.Arn, '*']]
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${TrailName}"
                s3:x-amz-acl: bucket-owner-full-control

  LambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule for piping lambda management events to Datadog lambda remote instrumenter"
      EventPattern:
        source:
          - aws.lambda
        detail:
          eventSource:
            - lambda.amazonaws.com
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "DatadogInstrumentingLambdaTarget"

  LambdaEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InstrumenterFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRule.Arn

  LambdaSchedulerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt LambdaFunction.Arn

  LambdaInvocationScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: "Schedule for invoking the instrumenter lambda function"
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Target:
        Arn: !GetAtt LambdaFunction.Arn
        RoleArn: !GetAtt LambdaSchedulerRole.Arn
        Input: |
            {
                "event-type": "Scheduled Instrumenter Invocation"
            }
