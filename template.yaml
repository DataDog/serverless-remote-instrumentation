AWSTemplateFormatVersion: "2010-09-09"

Description: Datadog Lambda Remote Instrumentation App

Mappings:
  Constants:
    DatadogRemoteInstrumentDemoApp:
      Version: 0.0.1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Remote Instrumenter Configuration
        Parameters:
          - DdRemoteInstrumentLayer
          - DdTagRule
          - DdAllowList
          - DdDenyList
          - DdApiKey
          - EnableCodeSigningConfigurations
          - BucketName
      - Label:
          default: Layer Versions
        Parameters:
          - DdExtensionLayerVersion
          - DdPythonLayerVersion
          - DdNodeLayerVersion
      - Label:
          default: Additional Configs
        Parameters:
          - DdSite
          - MinimumMemorySize
          - InstrumenterFunctionName
          - TrailName
          - DdAwsAccountNumber

Conditions:
  CreateCodeSigningConfig: !Equals [ !Ref EnableCodeSigningConfigurations, "true" ]

Parameters:
  EnableCodeSigningConfigurations:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: Whether to enable code signing configurations.
  DdRemoteInstrumentLayer:
    Type: String
    Default: arn:aws:lambda:eu-west-2:425362996713:layer:Datadog-Serverless-Remote-Instrumentation-ARM:26
  DdApiKey:
    Type: String
    Description: >-
      The Datadog API key, which can be found from the APIs page
      (/organization-settings/api-keys).
    NoEcho: true
  DdSite:
    Type: String
    Default: datadoghq.com
    Description: >-
      Possible values are `datadoghq.com`, `datadoghq.eu`, `us3.datadoghq.com`, `us5.datadoghq.com`, `ap1.datadoghq.com`.
    AllowedPattern: .+
    ConstraintDescription: DdSite is required
  InstrumenterFunctionName:
    Type: String
    Default: datadog-remote-instrumenter
    Description: >-
      Define the Lambda function name which is instrumenting the other Lambda functions.
  BucketName:
    Type: String
    Default: datadog-remote-instrument-YOUR-COMPANY-NAME
    Description: >-
      Since S3 buckets are globally unique across AWS regions, please update the name of the bucket that is used to store CloudTrail management event.
  TrailName:
    Type: String
    Default: datadog-serverless-instrumentation-trail
  DdAwsAccountNumber:
    Type: String
    Default: '425362996713'
  DdAllowList:
    Type: String
    Default: test-remote-instrument-node,test-remote-instrument-another-node,test-remote-instrument-does-not-exist,test-remote-instrument-python
  DdTagRule:
    Type: String
    Default: DD_REMOTE_INSTRUMENT_ENABLED:true
  DdDenyList:
    Type: String
    Default: test-remote-instrument-another-node
  DdExtensionLayerVersion:
    Type: String
    Default: '50'
  DdPythonLayerVersion:
    Type: String
    Default: '70'
  DdNodeLayerVersion:
    Type: String
    Default: '100'
  MinimumMemorySize:
    Type: String
    Default: '512'
  DdRemoteInstrumentLayerAwsAccount:
    Type: String
    Default: '464622532012'
    Description: >- 
      have to do this so that we can use dev layer in the sandbox account   

Resources:
  CloudFormationLifeCycle:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      FunctionName: !Ref InstrumenterFunctionName
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref InstrumenterFunctionName
      Architectures:
      - arm64
      Runtime: nodejs20.x
      CodeSigningConfigArn: !If [CreateCodeSigningConfig, !Ref InstrumenterCodeSigningConfig, !Ref "AWS::NoValue"]
      ReservedConcurrentExecutions: 1
      Timeout: 840
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: /opt/nodejs/node_modules/datadog-lambda-js/handler.handler
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Extension-ARM:50'
        - !Sub 'arn:aws:lambda:${AWS::Region}:464622532012:layer:Datadog-Node20-x:99'
        - !Ref DdRemoteInstrumentLayer
      Environment:
        Variables:
          DD_LAMBDA_HANDLER: /opt/nodejs/node_modules/datadog-remote-instrument/handler.handler
          DD_TRACE_ENABLED: true
          DD_API_KEY: !Ref DdApiKey
          DD_LOG_LEVEL: DEBUG
          DD_TRACE_DEBUG: false
          DD_SERVICE: Datadog-Instrument
          DD_ENV: dev
          DD_SITE: !Ref DdSite
          DD_AWS_ACCOUNT_NUMBER: !Ref DdAwsAccountNumber
          DD_ALLOW_LIST: !Ref DdAllowList
          DD_TAG_RULE: !Ref DdTagRule
          DD_DENY_LIST: !Ref DdDenyList
          DD_EXTENSION_LAYER_VERSION: !Ref DdExtensionLayerVersion
          DD_PYTHON_LAYER_VERSION: !Ref DdPythonLayerVersion
          DD_NODE_LAYER_VERSION: !Ref DdNodeLayerVersion
          DD_MinimumMemorySize: !Ref MinimumMemorySize
          DD_INSTRUMENTER_FUNCTION_NAME: !Ref InstrumenterFunctionName
      Tags:
        - Key: "dd_serverless_service"
          Value: "remote_instrumenter"
      Code:
        ZipFile: |
          const cfnResponse = require("cfn-response");  // file will be auto-injected by CloudFormation
          exports.handler = async (event, context, callback) => {
            return `Succeeded.`;
          };

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:GetFunction
              - lambda:UpdateFunctionConfiguration
              - lambda:TagResource
              - lambda:UntagResource
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource:
            - !Sub arn:aws:lambda:${AWS::Region}:464622532012:layer:*
            - !Sub arn:aws:lambda:${AWS::Region}:${DdRemoteInstrumentLayerAwsAccount}:layer:*
          - Effect: Allow
            Action:
              - lambda:ListTags
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Effect: Allow
            Action:
              - tag:GetResources
              - tag:TagResources
              - tag:UntagResources
            Resource: '*'
            Condition:
              ArnEquals:
                lambda:SourceFunctionArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${InstrumenterFunctionName}
#            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*  # doesn't work
#            Resource: 'arn:aws:lambda:*'  # doesn't work

  InstrumenterCodeSigningConfig:
    Type: "AWS::Lambda::CodeSigningConfig"
    Condition: CreateCodeSigningConfig
    Properties:
      Description: "Lambda Code Signing Configuration"
      AllowedPublishers:
        SigningProfileVersionArns:
          - 'arn:aws:signer:us-east-1:464622532012:/signing-profiles/DatadogLambdaSigningProfile/9vMI9ZAGLc'
      CodeSigningPolicies:
        UntrustedArtifactOnDeployment: Enforce

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - S3Bucket
    Properties:
      S3BucketName: !Ref BucketName
      IsLogging: true
      TrailName: !Ref TrailName
      EnableLogFileValidation: false
      IncludeGlobalServiceEvents: false
      IsMultiRegionTrail: false
      Tags:
        - Key: "env"
          Value: "dev"
      AdvancedEventSelectors:
        - Name: "Lambda Management Events"
          FieldSelectors:
            - Field: "eventCategory"
              Equals: [ "Management" ]
            - Field: "eventSource"
              NotEquals:
                - kms.amazonaws.com
                - rdsdata.amazonaws.com
            - Field: "readOnly"
              Equals:
                - "false"
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref BucketName
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub "arn:aws:s3:::${BucketName}"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${TrailName}"
          - Sid: AWSCloudTrailWrite20150319
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${TrailName}"
                s3:x-amz-acl: bucket-owner-full-control
  LambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule for piping lambda management events to Datadog lambda remote instrumenter"
      EventPattern:
        source:
          - aws.lambda
        detail:
          eventSource:
            - lambda.amazonaws.com
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "DatadogInstrumentingLambdaTarget"
  LambdaTagResourceEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule for piping lambda TagResource20170331v2 management events to Datadog lambda instrumenter"
      EventPattern:
        source:
          - aws.lambda
        detail:
          eventSource:
            - lambda.amazonaws.com
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "DatadogInstrumentingLambdaTarget"
  StackUpdateEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule for piping stack update management events to Datadog lambda instrumenter"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: "DatadogInstrumentingLambdaTarget"
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        resources:
#          - wildcard: !Sub "arn:aws:cloudformation:*:*:stack/${StackName}*/*"  -> does not work
          # Hardcoded stack name so the customer cannot change their stack name until RC integration is released
          - wildcard: arn:aws:cloudformation:*:*:stack/datadog-remote-instrument*/*
        detail:
          status-details:
            status:
              - UPDATE_COMPLETE
  LambdaEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InstrumenterFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaEventRule.Arn
  StackUpdateEventRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InstrumenterFunctionName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StackUpdateEventRule.Arn
