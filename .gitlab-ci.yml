variables:
  DOCKER_TARGET_IMAGE: registry.ddbuild.io/ci/serverless-remote-instrumentation
  DOCKER_TARGET_VERSION: latest
  SELF_MONITORING: true
  RUNNING_IN_GITHUB_ACTION: true

.defined_rules:
  merge_into_main:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
      when: on_success

stages:
  - build
  - deploy
  - test
  - publish

ci image:
  stage: build
  image: registry.ddbuild.io/images/docker:20.10
  tags: ["arch:arm64"]
  resource_group: pipeline
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - .gitlab/Dockerfile
      when: on_success
  when: manual
  variables:
    DOCKER_TARGET: ${DOCKER_TARGET_IMAGE}:${DOCKER_TARGET_VERSION}
  script:
    - docker buildx build --platform linux/amd64,linux/arm64 --no-cache --pull --push --tag ${DOCKER_TARGET} -f .gitlab/Dockerfile .

deploy self monitoring apps:
  stage: deploy
  image: ${DOCKER_TARGET_IMAGE}:${DOCKER_TARGET_VERSION}
  allow_failure: false
  tags: ["arch:arm64"]
  resource_group: pipeline
  needs: []
  when: manual
  rules:
    - !reference [.defined_rules, merge_into_main]
  variables:
    ACCOUNT: sandbox
  before_script:
    - EXTERNAL_ID_NAME=sandbox-publish-externalid ROLE_TO_ASSUME=sandbox-layer-deployer AWS_ACCOUNT=425362996713 source .gitlab/scripts/get_secrets.sh
  script:
    - yarn install
    - yarn integ-test-setup

integration tests:
  stage: test
  image: ${DOCKER_TARGET_IMAGE}:${DOCKER_TARGET_VERSION}
  allow_failure: false
  tags: ["arch:arm64"]
  resource_group: pipeline
  needs: [deploy self monitoring apps]
  when: manual
  rules:
    - !reference [.defined_rules, merge_into_main]
  variables:
    ACCOUNT: sandbox
  before_script:
    - EXTERNAL_ID_NAME=sandbox-publish-externalid ROLE_TO_ASSUME=sandbox-layer-deployer AWS_ACCOUNT=425362996713 source .gitlab/scripts/get_secrets.sh
  script:
    - yarn install
    - node -e "require('./scripts/test_setup').generateTestConfig()"
    - yarn integ

metrics validation:
  stage: test
  image: ${DOCKER_TARGET_IMAGE}:${DOCKER_TARGET_VERSION}
  allow_failure: false
  tags: ["arch:arm64"]
  resource_group: pipeline
  needs: [integration tests]
  when: manual
  rules:
    - !reference [.defined_rules, merge_into_main]
  variables:
    ACCOUNT: sandbox
  before_script:
    - EXTERNAL_ID_NAME=sandbox-publish-externalid ROLE_TO_ASSUME=sandbox-layer-deployer AWS_ACCOUNT=425362996713 source .gitlab/scripts/get_secrets.sh
  script:
    - echo "This doesn't exist yet, but we should be calling datadog to get metrics for things like:"
    - echo "There are no lambda errors"
    - echo "The duration of the function is reasonable"
    - echo "Other custom metrics we emit are being emitted at the values we expect"

publish (sandbox):
  stage: publish
  image: ${DOCKER_TARGET_IMAGE}:${DOCKER_TARGET_VERSION}
  allow_failure: false
  tags: ["arch:arm64"]
  needs: [metrics validation]
  when: manual
  rules:
    - !reference [.defined_rules, merge_into_main]
  variables:
    ACCOUNT: sandbox
    BUCKET: datadog-cloudformation-template-serverless-sandbox
    OBJECT_PREFIX: aws/remote-instrument-dev/
  before_script:
    - EXTERNAL_ID_NAME=sandbox-publish-externalid ROLE_TO_ASSUME=sandbox-layer-deployer AWS_ACCOUNT=425362996713 source .gitlab/scripts/get_secrets.sh
  script:
    - yarn install
    - node -e "require('./scripts/test_setup').generateTestConfig()"
    - bash scripts/publish.sh

publish (prod):
  stage: publish
  image: ${DOCKER_TARGET_IMAGE}:${DOCKER_TARGET_VERSION}
  allow_failure: false
  tags: ["arch:arm64"]
  resource_group: pipeline
  needs: [publish (sandbox)]
  when: manual
  rules:
    - !reference [.defined_rules, merge_into_main]
  variables:
    ACCOUNT: prod
    BUCKET: datadog-cloudformation-template
    OBJECT_PREFIX: aws/remote-instrument/
  before_script:
    - EXTERNAL_ID_NAME=prod-publish-externalid ROLE_TO_ASSUME=dd-serverless-layer-deployer-role AWS_ACCOUNT=464622532012 source .gitlab/scripts/get_secrets.sh
  script:
    - yarn install
    - node -e "require('./scripts/test_setup').generateTestConfig()"
    - bash scripts/publish.sh
